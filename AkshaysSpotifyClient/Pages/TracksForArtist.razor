@page "/tracksforartist/{ArtistID}"
@using SpotifyApi.NetCore
@inject IArtistsApi artistsApi
@inject ISearchApi searchApi
<h3>TracksForArtist:: @artist?.Name</h3>
@if (searchTracks.Count > 0)
{
    <div>
        <table class="table table-dark">
            @foreach (CustomTrack track in searchTracks)
            {
                <tr>
                    <td>
                        <SpotifyTrack Track="@track" />
                    </td>
                </tr>
            }
        </table>
    </div>
}
@code {
    [Parameter]
    public string ArtistID { get; set; }

    Artist artist;
    List<CustomTrack> searchTracks = new List<CustomTrack>();

    protected override async Task OnInitializedAsync()
    {
        artist = await artistsApi.GetArtist(ArtistID, Globals.SpotifyAccessToken.access_token);
        int currentTrackCount = 0;
        SearchResult searchResult;
        do
        {
            searchResult = await searchApi.Search("artist:\"" + artist.Name + "\"", new string[] { "artist", "track" }, limit: 50,
                offset: currentTrackCount, accessToken: Globals.SpotifyAccessToken.access_token);
            currentTrackCount += searchResult.Tracks.Items.Length;
            foreach (Track track in searchResult.Tracks.Items)
            {
                CustomTrack customTrack = new CustomTrack(track.Name, track.Id, track.Popularity);
                searchTracks.Add(customTrack);
                foreach (Artist trackArtist in track.Artists)
                {
                    if (trackArtist.Name != artist.Name)
                    {
                        customTrack.Artists.Add(new CustomTrack.CustomArtist(trackArtist.Name, trackArtist.Id));
                    }
                }
            }
        } while (currentTrackCount < searchResult.Tracks.Total && currentTrackCount < 1951);
        searchTracks.Sort((a, b) => b.Popularity.CompareTo(a.Popularity));
    }
}
