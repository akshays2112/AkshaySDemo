@page "/SpotifyAPI/spotifylistplaylists"
@using SpotifyApi.NetCore
@using System.ComponentModel.DataAnnotations 
@inject IPlaylistsApi playlistsApi
@inject IArtistsApi artistsApi
@attribute [Authorize]
<h3>Spotify List Playlists</h3>

<EditForm Model="@searchForArtistOrSong" OnValidSubmit="@SearchForArtists">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        Search for Artist or Song
        <InputText @bind-Value="@searchForArtistOrSong.SearchString" />
    </div>
    <button type="submit" class="btn btn-primary">Find Artist or Song</button>
</EditForm>
@testOutput
<hr />

<button @onclick="@GetPlaylists">Get Spotify Playlists</button>
<br />
@foreach (UserPlaylist userPlaylist in userPlayLists)
{
    <div>Playlist Name:: @userPlaylist.Name Total:: @userPlaylist.Total Playlist Id: @userPlaylist.Id </div>
    <table>
        <thead>
            <tr>
                <th>
                    Index
                </th>
                <th>
                    Song Name
                </th>
            </tr>
        </thead>
        <tbody>
            @if (userPlaylist.UserPlaylistTracks != null)
            {
                foreach (UserPlaylist.UserPlaylistTrack track in userPlaylist.UserPlaylistTracks)
                {
                    <tr>
                        <td>
                            @track.Index
                        </td>
                        <td>
                            @track.Name
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    class UserPlaylist
    {
        public string Name { get; set; }
        public int Total { get; set; }
        public string Id { get; set; }

        public class UserPlaylistTrack
        {
            public string Name { get; set; }
            public int Index { get; set; }

            public UserPlaylistTrack(string name, int index)
            {
                this.Name = name;
                this.Index = index;
            }
        }

        public List<UserPlaylistTrack> UserPlaylistTracks = new List<UserPlaylistTrack>();

        public UserPlaylist(string name, int total, string id)
        {
            this.Name = name;
            this.Total = total;
            this.Id = id;
        }
    }

    class SearchForArtistOrSong
    {
        [Required]
        public string SearchString { get; set; }
    }

    List<UserPlaylist> userPlayLists = new List<UserPlaylist>();

    SearchForArtistOrSong searchForArtistOrSong = new SearchForArtistOrSong();

    string testOutput;

    async Task GetPlaylists()
    {
        try
        {
            PlaylistsSearchResult playlistsSearchResult = await playlistsApi.GetPlaylists(Startup.SpotifyUserAccountName, Startup.SpotifyUserAccessToken);
            foreach (PlaylistSimplified playlistSimplified in playlistsSearchResult.Items)
            {
                int counter = 0;
                int indexCounter = 1;
                UserPlaylist userPlaylist = new UserPlaylist(playlistSimplified.Name, playlistSimplified.Tracks.Total, playlistSimplified.Id);
                userPlayLists.Add(userPlaylist);
                while (counter < userPlaylist.Total)
                {
                    PlaylistPaged playlistPaged;
                    try
                    {
                        playlistPaged = await playlistsApi.GetTracks(playlistSimplified.Id, Startup.SpotifyUserAccessToken, limit: 100, offset: counter);
                        foreach (PlaylistTrack playlistTrack in playlistPaged.Items)
                        {
                            userPlaylist.UserPlaylistTracks.Add(new UserPlaylist.UserPlaylistTrack(playlistTrack.Track.Name, indexCounter++));
                        }
                        counter += playlistPaged.Items.Length;
                    }
                    catch (System.Net.Http.HttpRequestException ex)
                    {
                        testOutput = $"PlaylistsApi.GetTracks() threw the following message {ex.Message}";
                    }
                }
            }
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            testOutput = $"PlaylistsApi.GetPlaylists() thre the following message {ex.Message}";
        }
    }

    void SearchForArtists()
    {
        testOutput = $"You tried to search for {searchForArtistOrSong.SearchString}";
    }
}
