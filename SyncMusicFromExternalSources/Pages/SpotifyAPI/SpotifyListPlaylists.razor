@page "/SpotifyAPI/spotifylistplaylists"
@using SpotifyApi.NetCore
@using System.ComponentModel.DataAnnotations
@inject IPlaylistsApi playlistsApi
@inject IArtistsApi artistsApi
@inject IUsersProfileApi usersApi
@inject IFollowApi followApi
@inject ISearchApi searchApi
<h3>Spotify List Playlists</h3>

<EditForm Model="@searchForArtistOrSong" OnValidSubmit="@SearchForArtists">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        Search for Artist or Song
        <InputText @bind-Value="@searchForArtistOrSong.SearchString" />
        <InputSelect @bind-Value="@searchForArtistOrSong.TypeToSearchFor">
            <option value="playlist">Playlist</option>
            <option value="artist">Artist</option>
            <option value="track">Track</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Find Artist or Song</button>
</EditForm>
@testOutput
<hr />

<table>
    <thead>
        <tr>
            <th>
                Track Name
            </th>
            <th>
                Track Id
            </th>
            <th>
                Artists
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (CustomTrack track in searchTracks)
        {
            <tr>
                <td style="vertical-align:top">
                    @track.Name
                </td>
                <td style="vertical-align:top">
                    @track.ID
                </td>
                <td>
                    <table>
                        @foreach (CustomTrack.CustomArtist customArtist in track.Artists)
                        {
                            <tr>
                                <td style="width:100px">
                                    @customArtist.Name
                                </td>
                                <td style="width:100px">
                                    @customArtist.ID
                                </td>
                            </tr>
                        }
                    </table>
                </td>
            </tr>
        }
    </tbody>
</table>

<hr />
@foreach (UserPlaylist userPlaylist in searchPlayLists)
{
    <div>Playlist Name:: @userPlaylist.Name Total:: @userPlaylist.Total Playlist Id: @userPlaylist.Id </div>
    <table>
        <thead>
            <tr>
                <th>
                    Index
                </th>
                <th>
                    Song Name
                </th>
            </tr>
        </thead>
        <tbody>
            @if (userPlaylist.UserPlaylistTracks != null)
            {
                foreach (UserPlaylist.UserPlaylistTrack track in userPlaylist.UserPlaylistTracks)
                {
                    <tr>
                        <td>
                            @track.Index
                        </td>
                        <td>
                            @track.Name
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<hr />

<button @onclick="@GetFollowingArtists">Get Following</button>
<br />
@if (isFollowingArtist != null)
{
    foreach (bool b in isFollowingArtist)
    {
        @b
        <br />
    }
}

<hr />

<button @onclick="@GetFollowingPlaylist">Get Following</button>
<br />
@if (isFollowingPlaylist != null)
{
    foreach (bool b in isFollowingPlaylist)
    {
        @b
        <br />
    }
}

<hr />
<button @onclick="@GetPlaylists">Get Spotify Playlists</button>
<br />
@foreach (UserPlaylist userPlaylist in userPlayLists)
{
    <div>Playlist Name:: @userPlaylist.Name Total:: @userPlaylist.Total Playlist Id: @userPlaylist.Id </div>
    <table>
        <thead>
            <tr>
                <th>
                    Index
                </th>
                <th>
                    Song Name
                </th>
            </tr>
        </thead>
        <tbody>
            @if (userPlaylist.UserPlaylistTracks != null)
            {
                foreach (UserPlaylist.UserPlaylistTrack track in userPlaylist.UserPlaylistTracks)
                {
                    <tr>
                        <td>
                            @track.Index
                        </td>
                        <td>
                            @track.Name
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    class SearchForArtistOrSong
    {
        [Required]
        public string SearchString { get; set; }

        [Required]
        public string TypeToSearchFor { get; set; }
    }

    List<UserPlaylist> userPlayLists = new List<UserPlaylist>();

    List<UserPlaylist> searchPlayLists = new List<UserPlaylist>();

    List<CustomTrack> searchTracks = new List<CustomTrack>();

    SearchForArtistOrSong searchForArtistOrSong = new SearchForArtistOrSong();

    string testOutput;

    bool[] isFollowingArtist;

    bool[] isFollowingPlaylist;

    async Task GetPlaylists()
    {
        try
        {
            User user = await usersApi.GetCurrentUsersProfile(Startup.SpotifyUserAccessToken);
            PlaylistsSearchResult playlistsSearchResult = await playlistsApi.GetPlaylists(user.Id, Startup.SpotifyUserAccessToken);
            foreach (PlaylistSimplified playlistSimplified in playlistsSearchResult.Items)
            {
                int counter = 0;
                int indexCounter = 1;
                UserPlaylist userPlaylist = new UserPlaylist(playlistSimplified.Name, playlistSimplified.Tracks.Total, playlistSimplified.Id);
                userPlayLists.Add(userPlaylist);
                while (counter < userPlaylist.Total)
                {
                    PlaylistPaged playlistPaged;
                    try
                    {
                        playlistPaged = await playlistsApi.GetTracks(playlistSimplified.Id, Startup.SpotifyUserAccessToken, limit: 100, offset: counter);
                        foreach (PlaylistTrack playlistTrack in playlistPaged.Items)
                        {
                            userPlaylist.UserPlaylistTracks.Add(new UserPlaylist.UserPlaylistTrack(playlistTrack.Track.Name, indexCounter++));
                        }
                        counter += playlistPaged.Items.Length;
                    }
                    catch (System.Net.Http.HttpRequestException ex)
                    {
                        testOutput = $"PlaylistsApi.GetTracks() threw the following message {ex.Message}";
                    }
                }
            }
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            testOutput = $"PlaylistsApi.GetPlaylists() the following message {ex.Message}";
        }
    }

    async Task SearchForArtists()
    {
        testOutput = $"You tried to search for {searchForArtistOrSong.TypeToSearchFor}s with the following filter {searchForArtistOrSong.SearchString}";
        searchTracks.Clear();
        try
        {
            if (searchForArtistOrSong.TypeToSearchFor == "track")
            {
                SearchResult searchResult = await searchApi.Search(searchForArtistOrSong.SearchString, searchForArtistOrSong.TypeToSearchFor, "US", 50, 0, Startup.SpotifyUserAccessToken);
                foreach (Track track in searchResult.Tracks.Items)
                {
                    CustomTrack customTrack = new CustomTrack(track.Name, track.Id);
                    searchTracks.Add(customTrack);
                    foreach (Artist artist in track.Artists)
                    {
                        customTrack.Artists.Add(new CustomTrack.CustomArtist(artist.Name, artist.Id));
                    }
                }
            }
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            testOutput = $"SearchApi.Search() the following message {ex.Message}";
        }
    }

    async Task GetFollowingArtists()
    {
        try
        {
            isFollowingArtist = await followApi.CheckCurrentUserFollowsArtists(
                new string[] { "74ASZWbe4lXaubB36ztrGX" }, Startup.SpotifyUserAccessToken);
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            testOutput = $"FollowApi.GetCurrentUsersProfile() the following message {ex.Message}";
        }
    }

    async Task GetFollowingPlaylist()
    {
        try
        {
            User user = await usersApi.GetCurrentUsersProfile(Startup.SpotifyUserAccessToken);
            isFollowingPlaylist = await followApi.CheckUsersFollowPlaylist("2v3iNvBX8Ay1Gt2uXtUKUT",
                new string[] { "possan", "elogain" }, Startup.SpotifyUserAccessToken);
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            testOutput = $"FollowApi.GetCurrentUsersProfile() the following message {ex.Message}";
        }
    }
}
