@using Google.Apis.YouTube.v3
@using Google.Apis.Services
@using Google.Apis.YouTube.v3.Data
@if (SingleYoutubePlaylist.Count > 0)
{
    <button @onclick="@LoadYoutubePlaylistItems" class="btn btn-primary">Load or Refresh</button>
}
@if (SingleYoutubePlaylist.MyPlayListItems.Count > 0)
{
    <svg onclick="clickSvg('#@svgPathID')" width="34" height="34" transform="scale(0.735 0.735)"
            title="Expand or Collapse" data-toggle="collapse" data-target="#@divID">
        <circle cx="17" cy="17" r="15" stroke="white" stroke-width="4" fill="none" />
        <path id="@svgPathID" d="M17 28 L8 18 L14 18 L14 8 L20 8 L20 18 L26 18 Z" fill="white" />
        Sorry, your browser does not support inline SVG.
    </svg>
    <div id="@divID" class="collapse show" style="margin-left:60px;">
        <table class="table table-dark">
            @foreach (MyPlaylist.MyPlayListItem myPlayListItem in SingleYoutubePlaylist.MyPlayListItems)
            {
                <tr>
                    <td>
                        Youtube Video Title :: @myPlayListItem.Title
                        <SearchSpotifyByYoutubeMusicVideoTitle YoutubePlaylistItem="@myPlayListItem" SpotifyUserPlayLists="@SpotifyUserPlayLists" />
                    </td>
                </tr>
            }
        </table>
    </div>
}
@code {
    [Parameter]
    public MyPlaylist SingleYoutubePlaylist { get; set; }

    [Parameter]
    public List<UserPlaylist> SpotifyUserPlayLists { get; set; }

    string divID = $"divID{(Startup.DivIndex++).ToString()}";
    string svgPathID = $"svgPathID{(Startup.DivIndex++).ToString()}";

    async Task LoadYoutubePlaylistItems()
    {
        SingleYoutubePlaylist.MyPlayListItems.Clear();
        YouTubeService yts = new YouTubeService(new BaseClientService.Initializer
        {
            ApplicationName = Startup.GoogleApisApplicationName,
            ApiKey = Startup.GoogleApisApiKey
        });
        PlaylistItemsResource.ListRequest pir = yts.PlaylistItems.List("snippet,contentDetails");
        pir.MaxResults = 50;
        pir.AccessToken = Startup.GoogleUserAccessToken;
        pir.PlaylistId = SingleYoutubePlaylist.ID;
        PlaylistItemListResponse pilr = await pir.ExecuteAsync();
        foreach (PlaylistItem pi in pilr.Items)
        {
            SingleYoutubePlaylist.MyPlayListItems.Add(new MyPlaylist.MyPlayListItem(pi.Snippet.Title, pi.Id));
        }
        while (pilr.NextPageToken != null && pilr.NextPageToken.Length > 0)
        {
            pir.PageToken = pilr.NextPageToken;
            pilr = await pir.ExecuteAsync();
            foreach (PlaylistItem pi in pilr.Items)
            {
                SingleYoutubePlaylist.MyPlayListItems.Add(new MyPlaylist.MyPlayListItem(pi.Snippet.Title, pi.Id));
            }
        }
    }
}
