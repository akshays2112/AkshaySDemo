@page "/tracksforartist/{ArtistID}/{ArtistName}"
@using SpotifyApi.NetCore
@inject IArtistsApi artistsApi
@inject ISearchApi searchApi
@if (!string.IsNullOrWhiteSpace(ArtistID))
{
    <table class="table table-dark">
        <tr>
            <td>
                <h3>TracksForArtist:: @ArtistName</h3>
                <div class="d-flex">
                    <span title="Search for songs on Spotify by the artist whose name match the text in the textbox">
                        <svg @onclick="@ForceSearchForTracksByArtistName" fill="#FFFFFF" width="34" height="34">
                            <path fill="none" stroke="#FFFFFF" stroke-miterlimit="10" stroke-width="2" d="M13 4A9 9 0 1 0 13 22A9 9 0 1 0 13 4Z" />
                            <path fill="none" stroke="#FFFFFF" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" d="M26 26L19.437 19.437" />
                            Sorry, your browser does not support inline SVG.
                        </svg>
                    </span>
                    <input class="flex-grow-1" type="text" @bind-value="@ArtistName" style="border-radius: 5px; background: #73AD21; padding: 5px;" />
                </div>
                @if (searchTracks.Count > 0)
                {
                    <div>
                        <table class="table table-dark">
                            @foreach (CustomTrack track in searchTracks)
                            {
                                <tr>
                                    <td>
                                        <SpotifyTrack Track="@track" OnClick="ClickHandler" />
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            </td>
        </tr>
    </table>
}
@code {
    [Parameter]
    public string ArtistID { get; set; }

    [Parameter]
    public string ArtistName { get; set; }

    string oldArtistID;
    string oldArtistName;
    Artist artist = new Artist();
    List<CustomTrack> searchTracks = new List<CustomTrack>();

    protected override async Task OnInitializedAsync()
    {
        await SearchForTracksByArtistID();
    }

    async Task SearchForTracksByArtistID()
    {
        if (ArtistID != oldArtistID)
        {
            oldArtistID = ArtistID;
            artist = await artistsApi.GetArtist(ArtistID, Globals.SpotifyAccessToken.access_token);
            ArtistName = artist.Name;
            await SearchForTracksByArtistName();
        }
    }

    async Task ClickHandler((string, string) artistIDandName)
    {
        ArtistID = artistIDandName.Item1;
        ArtistName = artistIDandName.Item2;
        await SearchForTracksByArtistID();
    }

    async Task ForceSearchForTracksByArtistName()
    {
        await SearchForTracksByArtistName(true);
    }

    async Task SearchForTracksByArtistName(bool forceSearch = false)
    {
        if (forceSearch || ArtistName != oldArtistName)
        {
            oldArtistName = ArtistName;
            searchTracks.Clear();
            int currentTrackCount = 0;
            SearchResult searchResult;
            do
            {
                searchResult = await searchApi.Search("artist:\"" + ArtistName + "\"", new string[] { "artist", "track" }, limit: 50,
                    offset: currentTrackCount, accessToken: Globals.SpotifyAccessToken.access_token);
                currentTrackCount += searchResult.Tracks.Items.Length;
                foreach (Track track in searchResult.Tracks.Items)
                {
                    CustomTrack customTrack = new CustomTrack(track.Name, track.Id, track.Popularity);
                    searchTracks.Add(customTrack);
                    foreach (Artist trackArtist in track.Artists)
                    {
                        if (trackArtist.Name != ArtistName)
                        {
                            customTrack.Artists.Add(new CustomTrack.CustomArtist(trackArtist.Name, trackArtist.Id));
                        }
                    }
                }
            } while (currentTrackCount < searchResult.Tracks.Total && currentTrackCount < 1951);
            searchTracks.Sort((a, b) => b.Popularity.CompareTo(a.Popularity));
        }
    }
}
