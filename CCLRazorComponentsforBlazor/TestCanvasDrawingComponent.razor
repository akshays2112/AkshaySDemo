@inject IJSRuntime jsRuntime
<div @ref="divCanvas" @onclick="MyOnClick" style="width:@canvasWidth;height:@canvasHeight;border-style:none;margin:0 0 0 0;padding:0 0 0 0;">
    <BECanvas Width="@canvasWidth" Height="@canvasHeight" @ref="_canvasReference"></BECanvas>
</div>
@code {

    /* Since the canvas is the one with all the events you want to pass this to WindowManager.
     * The Razor components for controls will call RegisterWindow.  RegisterWindow will have mouse input 
     * events and also drawing functions.
     * WindowManager on an event or InvalidateRect call will call the registered controls registered
     * methods to handle the mouse events or the drawing.
     * If any of the paramters of the component (aka data) are changed then automagically it should
     * call InvalidateRect in the WindowManager.  Which in the WindowManagers Draw method should in
     * turn cascade down to the Controls in the region causing them to redraw with the new data
     * automagically.
     * Everything is basically driven by events and parameters data changed via the WindowManager.
     */

    internal int canvasWidth;
    [Parameter]
    public int Width
    {
        get
        {
            return canvasWidth;
        }
        set
        {
            if (value > 0 && value <= 10000)
            {
                canvasWidth = value;
            }
        }
    }

    internal int canvasHeight;
    [Parameter]
    public int Height
    {
        get
        {
            return canvasHeight;
        }
        set
        {
            if (value > 0 && value <= 10000)
            {
                canvasHeight = value;
            }
        }
    }

    private ElementReference divCanvas;
    private BECanvasComponent _canvasReference;
    private TestDrawingControl controlClass = new TestDrawingControl();
    private bool IsRendered = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await CCLJsInterops.SetViewportDimensions(jsRuntime, this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await controlClass.TestDrawLine(_canvasReference);
        IsRendered = true;
    }

    protected async Task MyOnClick(MouseEventArgs eventArgs)
    {
        if (IsRendered)
        {
            await CCLJsInterops.OnClick(jsRuntime, divCanvas, eventArgs, controlClass);
        }
    }
}
